/*!
 * AngularJS 1.x directive for excellent Mikhus's HTML5 Canvas Gauge
 *
 * https://github.com/Mikhus/canv-gauge
 * https://github.com/dec/angular-canvas-gauge
 *
 * This code is subject to MIT license.
 *
 * Copyright (c) 2016 David Esperalta - http://www.davidesperalta.com/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
angular.module("angular-canvas-gauge", []).directive("canvasGauge", function () { return { restrict: "A", link: function (g, f, c) { var e = { renderTo: c.id, value: 0, width: 200, height: 200, title: false, maxValue: 100, minValue: 0, majorTicks: [], minorTicks: 10, strokeTicks: true, units: false, valueFormat: { "int": 3, dec: 2 }, glow: true, animation: { delay: 10, duration: 250, fn: "cycle" }, colors: { plate: "#fff", majorTicks: "#444", minorTicks: "#666", title: "#888", units: "#888", numbers: "#444", needle: { start: "rgba(240, 128, 128, 1)", end: "rgba(255, 160, 122, .9)", circle: { outerStart: "#f0f0f0", outerEnd: "#ccc", innerStart: "#e8e8e8", innerEnd: "#f5f5f5" }, shadowUp: "rgba(2, 255, 255, 0.2)", shadowDown: "rgba(188, 143, 143, 0.45)" }, valueBox: { rectStart: "#888", rectEnd: "#666", background: "#babab2", shadow: "rgba(0, 0, 0, 1)" }, valueText: { foreground: "#444", shadow: "rgba(0, 0, 0, 0.3)" }, circle: { shadow: "rgba(0, 0, 0, 0.5)", outerStart: "#ddd", outerEnd: "#aaa", middleStart: "#eee", middleEnd: "#f0f0f0", innerStart: "#fafafa", innerEnd: "#ccc" } }, circles: { outerVisible: true, middleVisible: true, innerVisible: true }, valueBox: { visible: true }, valueText: { visible: true }, highlights: [{ from: 20, to: 60, color: "#eee" }, { from: 60, to: 80, color: "#ccc" }, { from: 80, to: 100, color: "#999" }] }; var h = new Gauge(e); h.draw(); var d = function (q) { var k = []; if (q === "") { return k } var p = q.match(/(?:(?:-?\d*\.)?(-?\d+){1,2} ){2}(?:(?:#|0x)?(?:[0-9A-F|a-f]){3,8}|rgba?\(.*?\))/g); if (p === null) { return k } for (var o = 0, n = p.length; o < n; o++) { var m = p[o].trim().split(/\s+/), i = {}; if (m[0] && m[0] != "") { i.from = m[0] } if (m[1] && m[1] != "") { i.to = m[1] } if (m[2] && m[2] != "") { i.color = m[2] } k.push(i) } return k }; var a = function (i) { return i === "true" }; var b = function () { return h.updateConfig({}).config }; c.$observe("value", function (i) { h.setValue(i) }); c.$observe("valueFormat", function (j) { var i = j.split("."); h.updateConfig(b().valueFormat["int"] = i[0] || undefined); h.updateConfig(b().valueFormat.dec = i[1] || undefined) }); c.$observe("glow", function (i) { h.updateConfig({ glow: a(i) }) }); c.$observe("title", function (i) { h.updateConfig({ title: i }) }); c.$observe("units", function (i) { h.updateConfig({ units: i }) }); c.$observe("width", function (i) { h.updateConfig({ width: i }) }); c.$observe("height", function (i) { h.updateConfig({ height: i }) }); c.$observe("minValue", function (i) { h.updateConfig({ minValue: i }) }); c.$observe("maxValue", function (i) { h.updateConfig({ maxValue: parseFloat(i) }) }); c.$observe("minorTicks", function (i) { h.updateConfig({ minorTicks: parseFloat(i) }) }); c.$observe("majorTicks", function (i) { h.updateConfig({ majorTicks: i.split(" ") }) }); c.$observe("highlights", function (i) { h.updateConfig({ highlights: d(i) }) }); c.$observe("strokeTicks", function (i) { h.updateConfig({ strokeTicks: a(i) }) }); c.$observe("animationFn", function (i) { h.updateConfig(b().animation.fn = i) }); c.$observe("animationDelay", function (i) { h.updateConfig(b().animation.delay = parseFloat(i)) }); c.$observe("animationDuration", function (i) { h.updateConfig(b().animation.duration = parseFloat(i)) }); c.$observe("colorsPlate", function (i) { h.updateConfig(b().colors.plate = i) }); c.$observe("colorsUnits", function (i) { h.updateConfig(b().colors.units = i) }); c.$observe("colorsTitle", function (i) { h.updateConfig(b().colors.title = i) }); c.$observe("colorsNumbers", function (i) { h.updateConfig(b().colors.numbers = i) }); c.$observe("colorsNeedleStart", function (i) { h.updateConfig(b().colors.needle.start = i) }); c.$observe("colorsNeedleEnd", function (i) { h.updateConfig(b().colors.needle.end = i) }); c.$observe("colorsNeedleShadowup", function (i) { h.updateConfig(b().colors.needle.shadowUp = i) }); c.$observe("colorsNeedleShadowdown", function (i) { h.updateConfig(b().colors.needle.shadowDown = i) }); c.$observe("colorsNeedleCircleOuterstart", function (i) { h.updateConfig(b().colors.needle.circle.outerStart = i) }); c.$observe("colorsNeedleCircleOuterend", function (i) { h.updateConfig(b().colors.needle.circle.outerEnd = i) }); c.$observe("colorsNeedleCircleInnerstart", function (i) { h.updateConfig(b().colors.needle.circle.innerStart = i) }); c.$observe("colorsNeedleCircleInnerend", function (i) { h.updateConfig(b().colors.needle.circle.innerEnd = i) }); c.$observe("colorsValueboxRectstart", function (i) { h.updateConfig(b().colors.valueBox.rectStart = i) }); c.$observe("colorsValueboxRectend", function (i) { h.updateConfig(b().colors.valueBox.rectEnd = i) }); c.$observe("colorsValueboxBackground", function (i) { h.updateConfig(b().colors.valueBox.background = i) }); c.$observe("colorsValueboxShadow", function (i) { h.updateConfig(b().colors.valueBox.shadow = i) }); c.$observe("colorsValuetextForeground", function (i) { h.updateConfig(b().colors.valueText.foreground = i) }); c.$observe("colorsValuetextShadow", function (i) { h.updateConfig(b().colors.valueText.shadow = i) }); c.$observe("colorsCircleShadow", function (i) { h.updateConfig(b().colors.circle.shadow = i) }); c.$observe("colorsCircleOuterstart", function (i) { h.updateConfig(b().colors.circle.outerStart = i) }); c.$observe("colorsCircleOuterend", function (i) { h.updateConfig(b().colors.circle.outerEnd = i) }); c.$observe("colorsCircleMiddlestart", function (i) { h.updateConfig(b().colors.circle.middleStart = i) }); c.$observe("colorsCircleMiddleend", function (i) { h.updateConfig(b().colors.circle.middleEnd = i) }); c.$observe("colorsCircleInnerstart", function (i) { h.updateConfig(b().colors.circle.innerStart = i) }); c.$observe("colorsCircleInnerend", function (i) { h.updateConfig(b().colors.circle.innerEnd = i) }); c.$observe("colorsMinorTicks", function (i) { h.updateConfig(b().colors.minorTicks = i) }); c.$observe("colorsMajorTicks", function (i) { h.updateConfig(b().colors.majorTicks = i) }); c.$observe("valueboxVisible", function (i) { h.updateConfig(b().valueBox.visible = a(i)) }); c.$observe("valuetextVisible", function (i) { h.updateConfig(b().valueText.visible = a(i)) }); c.$observe("circlesOutervisible", function (i) { h.updateConfig(b().circles.outerVisible = a(i)) }); c.$observe("circlesMiddlevisible", function (i) { h.updateConfig(b().circles.middleVisible = a(i)) }); c.$observe("circlesInnervisible", function (i) { h.updateConfig(b().circles.innerVisible = a(i)) }) } } });